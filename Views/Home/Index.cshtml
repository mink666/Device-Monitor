@{
    ViewData["Title"] = "Home";
}
@model IEnumerable<LoginWeb.ViewModels.DeviceDisplayViewModel>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Welcome, @Context.Session.GetString("Username")!</h2>
    </div>

    <p>You have successfully logged in.</p>

<button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addDeviceModal">
    Add New Device
</button>

<div class="modal fade" id="addDeviceModal" tabindex="-1" aria-labelledby="addDeviceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addDeviceModalLabel">Add New Device</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addDeviceForm">
                    <div class="mb-3">
                        <label for="deviceName" class="form-label">Device Name</label>
                        <input type="text" class="form-control" id="deviceName" name="Name" placeholder="Enter device name" required>
                    </div>
                    <div class="mb-3">
                        <label for="deviceIP" class="form-label">IP Address</label>
                        <input type="text" class="form-control" id="deviceIP" name="IPAddress" placeholder="Enter IP Address" required>
                    </div>
                    <div class="mb-3">
                        <label for="devicePort" class="form-label">Port</label>
                        <input type="number" class="form-control" id="devicePort" name="Port" value="161">
                    </div>
                    <div class="mb-3">
                        <label for="deviceCommunityString" class="form-label">Community</label>
                        <input type="text" class="form-control" id="deviceCommunityString" name="CommunityString" placeholder="Enter community string" required>
                    </div>
                    <div class="mb-3">
                        <label for="devicePollingInterval" class="form-label">Polling Interval (seconds)</label>
                        <input type="text" class="form-control" id="devicePollingInterval" name="PollingIntervalSeconds" value="60">
                    </div>
                    <div class="mb-3">
                        <label for="deviceIsEnabled" class="form-label">Monitoring</label>
                        <select class="form-select" id="deviceIsEnabled" name="IsEnabled">
                            <option value="true" selected>Enabled</option>
                            <option value="false">Disabled</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Device</button>
                </form>
            </div>
        </div>
    </div>
</div>



<div class="mb-3 d-flex justify-content-start">
    <button id="refreshDeviceListButton" class="btn btn-info">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z" />
            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z" />
        </svg> Refresh Data
    </button>
</div>
<hr />
<h3>Devices</h3>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>IP Address</th>
            <th>Port</th>
            <th>Active</th>
            <th>Polling Status</th>
            <th>Health Status</th>
            <th>CPU %</th>
            <th>RAM %</th>
            <th>Disk C %</th>
            <th>Uptime</th>
            <th>Last Check</th>
        </tr>
    </thead>
    <tbody id="deviceList">
        @foreach (var device in Model)
        {
            <tr data-id="@device.Id"
                data-name="@device.Name"
                data-ip="@device.IPAddress"
                data-port="@device.Port"
                data-community="@device.CommunityString"
                data-isenabled="@device.IsEnabled.ToString().ToLower()"
                data-pollinginterval="@device.PollingIntervalSeconds"
                data-status="@device.LastStatus" 
                data-osversion="@device.OSVersion" 
                data-cpu-load="@device.LatestCpuLoadPercentage"
                data-mem-usage-percent="@device.LatestMemoryUsagePercentage"
                data-disk-usage-percent="@device.LatestDiskUsagePercentage"
                data-total-ram-kb="@device.LatestTotalRamKBytes"
                data-used-ram-kb="@device.LatestUsedRamKBytes"
                data-total-disk-kb="@device.LatestTotalDiskKBytes"
                data-used-disk-kb="@device.LatestUsedDiskKBytes"
                data-sysuptime="@device.LatestSysUpTimeSeconds"
                data-lastcheck="@device.LastCheckTimestamp"
                data-health-status="@(device.HealthStatus.ToString())"
                data-health-reason="@device.HealthStatusReason"
                class="@GetRowClassForHealth(device.HealthStatus)"
                oncontextmenu="return showContextMenu(e, this);">
                <td>@device.Id</td>
                <td>@device.Name</td>
                <td>@device.IPAddress</td>
                <td>@device.Port</td>
                <td>@(device.IsEnabled ? "Enabled" : "Disabled")</td>
                <td>@device.LastStatus</td>
                <td>
                    <span class="badge @GetBootstrapBadgeClass(device.HealthStatus)">
                        @device.HealthStatus.ToString()
                    </span>
                    @if (!string.IsNullOrEmpty(device.HealthStatusReason))
                    {
                        <small class="d-block text-muted" title="@device.HealthStatusReason">
                            @TruncateText(device.HealthStatusReason, 50)
                        </small>
                    }
                </td>
                <td>@(device.LatestCpuLoadPercentage.HasValue ? $"{device.LatestCpuLoadPercentage:F2}%" : "N/A")</td>
                <td>@FormatStorage(device.LatestUsedRamKBytes, device.LatestTotalRamKBytes, device.LatestMemoryUsagePercentage)</td>
                <td>@FormatStorage(device.LatestUsedDiskKBytes, device.LatestTotalDiskKBytes, device.LatestDiskUsagePercentage)</td>
                <td>@FormatUptime(@device.LatestSysUpTimeSeconds)</td>
                <td>@device.LastCheckTimestamp?.ToString("g")</td>
            </tr>
        }
    </tbody>
</table>

@functions {
    public string FormatUptime(long? totalSeconds)
    {
        if (!totalSeconds.HasValue || totalSeconds.Value < 0) return "N/A";
        if (totalSeconds.Value == 0) return "<1m";
        var ts = TimeSpan.FromSeconds(totalSeconds.Value);
        return $"{ts.Days}d {ts.Hours}h {ts.Minutes}m {ts.Seconds}s";
    }
    public string FormatStorage(long? usedKBytes, long? totalKBytes, decimal? percentage)
    {
        if (!totalKBytes.HasValue || totalKBytes.Value <= 0)
        {
            return percentage.HasValue ? $"{percentage:F2}%" : "N/A";
        }
        if (!usedKBytes.HasValue && percentage.HasValue) // Calculate used if missing but percentage is there
        {
            usedKBytes = (long)(totalKBytes.Value * (percentage.Value / 100m));
        }
        if (!usedKBytes.HasValue)
        {
            return percentage.HasValue ? $"{percentage:F2}%" : "N/A";
        }

        string usedUnit = "KB";
        double cUsed = usedKBytes.Value;
        string totalUnit = "KB";
        double cTotal = totalKBytes.Value;

        // Determine unit for USED amount
        if (cUsed >= 1024 * 1024) { cUsed /= (1024 * 1024); usedUnit = "GB"; }
        else if (cUsed >= 1024) { cUsed /= 1024; usedUnit = "MB"; }

        // Determine unit for TOTAL amount
        if (cTotal >= 1024 * 1024) { cTotal /= (1024 * 1024); totalUnit = "GB"; }
        else if (cTotal >= 1024) { cTotal /= 1024; totalUnit = "MB"; }
        
        string percentageString = percentage.HasValue ? $" ({percentage:F2}%)" : "";

        if (usedUnit == totalUnit) {
            return $"{cUsed:F2} / {cTotal:F2} {totalUnit}{percentageString}";
        } else { // If units are different (e.g. used is MB, total is GB) show both
             return $"{cUsed:F2} {usedUnit} / {cTotal:F2} {totalUnit}{percentageString}";
        }
    }
    public string GetRowClassForHealth(LoginWeb.Models.DeviceHealth status)
    {
        return status switch
        {
            LoginWeb.Models.DeviceHealth.Healthy => "table-success",
            LoginWeb.Models.DeviceHealth.Warning => "table-warning",
            LoginWeb.Models.DeviceHealth.Unreachable => "table-danger",
            _ => "", // Default, no extra color
        };
    }

    public string GetBootstrapBadgeClass(LoginWeb.Models.DeviceHealth status)
    {
        return status switch
        {
            LoginWeb.Models.DeviceHealth.Healthy => "bg-success",
            LoginWeb.Models.DeviceHealth.Warning => "bg-warning text-dark",
            LoginWeb.Models.DeviceHealth.Unreachable => "bg-danger",
            _ => "bg-secondary",
        };
    }

    public string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength) return text;
        return text.Substring(0, maxLength) + "...";
    }
}


<!-- Edit Device Modal-->
<div class="modal fade" id="editDeviceModal" tabindex="-1" aria-labelledby="editDeviceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editDeviceModalLabel">Edit Device</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editDeviceForm">
                    <input type="hidden" id="editDeviceId" name="Id" />
                    <div class="mb-3">
                        <label for="editDeviceName" class="form-label">Device Name</label>
                        <input type="text" class="form-control" id="editDeviceName" name="Name" placeholder="Enter device name" required />
                        <span class="text-danger" id="editDeviceNameValidation"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editDeviceIP" class="form-label">IP Address</label>
                        <input type="text" class="form-control" id="editDeviceIP" name="IPAddress" placeholder="Enter device IP address" required />
                        <span class="text-danger" id="editDeviceIPValidation"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editDevicePort" class="form-label">Port</label>
                        <input type="number" class="form-control" id="editDevicePort" name="Port" placeholder="Enter device port" required />
                        <span class="text-danger" id="editDevicePortValidation"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editDeviceCommunity" class="form-label">Community</label>
                        <input type="text" class="form-control" id="editDeviceCommunity" name="CommunityString" placeholder="Enter device community string" required />
                        <span class="text-danger" id="editDeviceCommunityValidation"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editDeviceIsEnabled" class="form-label">Monitoring</label>
                        <select class="form-select" id="editDeviceIsEnabled" name="IsEnabled">
                            <option value="true">Enabled</option>
                            <option value="false">Disabled</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editDevicePollingInterval" class="form-label">Polling Interval(seconds)</label>
                        <input type="number" class="form-control" id="editDevicePollingInterval" name="PollingIntervalSeconds" placeholder="Enter polling interval" required />
                        <span class="text-danger" id="editDevicePollingIntervalValidation"></span>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Context menu dropdown -->
<div id="contextMenu" class="dropdown-menu" style="display: none; position: absolute;">
    <a id="editLink" class="dropdown-item" href="javascript:void(0);" data-bs-toggle="modal" data-bs-target="#editDeviceModal">Edit</a>
    <a id="deleteLink" class="dropdown-item" href="javascript:void(0);" onclick="return confirmDelete()">Delete</a>
</div>

<form action="/Reports/Generate" method="post" class="mb-3">
    <div class="d-flex align-items-center">
        <label for="reportTitle" class="me-2">Report Title:</label>
        <input type="text" class="me-2 form-control" id="reportTitle" name="title" required style="width: 200px;">
        <button type="submit" class="btn btn-primary">Download Report</button>
    </div>
</form>
<script src="~/js/device.js"></script>
