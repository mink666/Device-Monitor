using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System;
using System.Collections.Generic;
using LoginWeb.Models;
using LoginWeb.Data;
using System.Linq;
using LoginWeb.ViewModels;
public class PdfReportService
{
    private readonly AppDbContext _context;
    public PdfReportService(AppDbContext context)
    {
        _context = context;
    }
    private static string FormatUptime(long? totalSeconds, string lastStatus)
    {
        if (!totalSeconds.HasValue || totalSeconds.Value < 0) return "N/A";
        if (totalSeconds.Value == 0 && lastStatus == "Online") return "< 1 min";
        if (totalSeconds.Value == 0) return "0s";
        var ts = TimeSpan.FromSeconds(totalSeconds.Value);
        return $"{ts.Days}d {ts.Hours}h {ts.Minutes}m {ts.Seconds}s";
    }

    private static string FormatStorage(long? usedKBytes, long? totalKBytes, decimal? percentage)
    {
        if (!totalKBytes.HasValue || totalKBytes.Value <= 0)
            return percentage.HasValue ? $"{percentage:F2}%" : "N/A";

        if (!usedKBytes.HasValue && percentage.HasValue)
            usedKBytes = (long)(totalKBytes.Value * (percentage.Value / 100m));

        if (!usedKBytes.HasValue)
            return percentage.HasValue ? $"{percentage:F2}%" : "N/A";

        string formatBytes(long kb)
        {
            if (kb >= 1024 * 1024) return $"{(double)kb / (1024 * 1024):F2} GB";
            if (kb >= 1024) return $"{(double)kb / 1024:F2} MB";
            return $"{kb} KB";
        }
        ;

        string percentageString = percentage.HasValue ? $" ({percentage:F2}%)" : "";
        return $"{formatBytes(usedKBytes.Value)} / {formatBytes(totalKBytes.Value)}{percentageString}";
    }
    public static byte[] GenerateDeviceReport(string title, List<DeviceDisplayViewModel> devices, string generatedByUser)
    {
        try
        {
            byte[] pdfBytes = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4.Landscape());
                    page.Margin(30);

                    // Report Header
                    page.Header().Column(column =>
                    {
                        // 1. Main Title (Centered)
                        column.Item()
                            .AlignCenter()
                            .Text(title)
                            .FontSize(24) // Consistent font size
                            .Bold()
                            .FontColor(Colors.Blue.Darken2);

                        // Add some space after the title
                        column.Item().PaddingTop(4);

                        // 2. Two-column layout for Generated By and Report Date
                        column.Item().Row(row =>
                        {
                            // Left-aligned text
                            row.RelativeItem().AlignLeft().Text(txt =>
                            {
                                txt.Span("Generated By: ").SemiBold();
                                txt.Span(generatedByUser);
                            });

                            // Right-aligned text
                            row.RelativeItem().AlignRight().Text(txt =>
                            {
                                txt.Span("Report Date: ").SemiBold();
                                // Using AM/PM for consistency
                                txt.Span($"{DateTime.Now:yyyy-MM-dd hh:mm tt}");
                            });
                        });

                        // 3. Bottom margin to separate header from the table
                        column.Spacing(20);
                    });

                    // Table of Device Data
                    page.Content()
                        .Table(table =>
                        {
                            // Define Columns for the new structure
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn(1.5f);  // Name
                                columns.RelativeColumn(2);     // IP Address
                                columns.RelativeColumn(1.5f);  // Polling Status
                                columns.RelativeColumn(2);     // Health Status
                                columns.RelativeColumn(1.5f);  // CPU %
                                columns.RelativeColumn(3);     // RAM
                                columns.RelativeColumn(3);     // Disk C
                                columns.RelativeColumn(1.5f);  // Uptime
                                columns.RelativeColumn(2);     // Last Check
                            });

                            // Table Header Row
                            table.Header(header =>
                            {
                                // Helper action to style header cells
                                void HeaderCell(string text) => header.Cell().BorderBottom(1).Padding(5).PaddingTop(20).Text(text).Bold();

                                HeaderCell("Name");
                                HeaderCell("IP Address");
                                HeaderCell("Polling");
                                HeaderCell("Health");
                                HeaderCell("CPU");
                                HeaderCell("RAM");
                                HeaderCell("Disk C");
                                HeaderCell("Uptime");
                                HeaderCell("Last Check");
                            });

                            foreach (var device in devices)
                            {
                                // Helper action to style data cells
                                void DataCell(string text) => table.Cell().BorderBottom(0.5f).BorderColor(Colors.Grey.Lighten2).Padding(5).Text(text);

                                DataCell(device.Name);
                                DataCell(device.IPAddress);
                                DataCell(device.LastStatus ?? "N/A");
                                DataCell(device.HealthStatus.ToString()); 
                                DataCell(device.LatestCpuLoadPercentage.HasValue ? $"{device.LatestCpuLoadPercentage:F2}%" : "N/A");
                                DataCell(FormatStorage(device.LatestUsedRamKBytes, device.LatestTotalRamKBytes, device.LatestMemoryUsagePercentage));
                                DataCell(FormatStorage(device.LatestUsedDiskKBytes, device.LatestTotalDiskKBytes, device.LatestDiskUsagePercentage));
                                DataCell(FormatUptime(device.LatestSysUpTimeSeconds, device.LastStatus));
                                DataCell(device.LastCheckTimestamp?.ToString("yyyy-MM-dd HH:mm:ss") ?? "N/A");
                            }
                        });

                    page.Footer()
                        .AlignCenter()
                        .Text(x => // Use a TextSpan for page numbers
                        {
                            x.Span("Page ");
                            x.CurrentPageNumber();
                            x.Span(" of ");
                            x.TotalPages();
                        });
                });
            })
            .GeneratePdf(); 

            return pdfBytes;
        }
        catch (Exception ex)
        {
            throw; // Re-throw to let the controller handle the error
        }
    }
    public static byte[] GenerateDeviceHistoryReport(string title, DeviceHistoryReportViewModel reportData, string generatedByUser)
    {
        return Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4.Landscape());
                page.Margin(30);

                // Report Header
                page.Header().Column(column =>
                {
                    column.Item().AlignCenter().Text(title).FontSize(24).Bold().FontColor(Colors.Blue.Darken2);

                    column.Item().PaddingTop(8);

                    column.Item().Row(row =>
                    {                       
                        row.RelativeItem(2).Column(leftCol =>
                        {
                            // Set spacing between each line in this column
                            leftCol.Spacing(5);

                            // Generated By
                            leftCol.Item().Text(txt =>
                            {
                                txt.Span("Generated By: ").SemiBold();
                                txt.Span(generatedByUser);
                            });

                            // Device
                            leftCol.Item().Text(txt =>
                            {
                                txt.Span("Device: ").SemiBold();
                                txt.Span($"{reportData.DeviceName} ({reportData.DeviceIpAddress})");
                            });

                            // Period
                            leftCol.Item().Text(txt =>
                            {
                                txt.Span("Period: ").SemiBold();
                                txt.Span($"{reportData.StartDate:yyyy-MM-dd hh:mm tt} to {reportData.EndDate:yyyy-MM-dd hh:mm tt}");
                            });
                        });

                        // --- Right Column ---
                        row.RelativeItem(1).AlignRight().Text(txt =>
                        {
                            txt.Span("Report Date: ").SemiBold();
                            txt.Span($"{DateTime.Now:yyyy-MM-dd hh:mm tt}");
                        });
                    });

                    column.Spacing(20);
                });


                // Table of Historical Data
                page.Content().Table(table =>
                {
                    table.ColumnsDefinition(columns =>
                    {
                        columns.RelativeColumn(2.5f); // Timestamp
                        columns.RelativeColumn(1.5f); // Polling Status
                        columns.RelativeColumn(1.5f); // Health Status
                        columns.RelativeColumn(2.5f); // Health Reason
                        columns.RelativeColumn(1f);   // CPU
                        columns.RelativeColumn(2f);   // RAM
                        columns.RelativeColumn(2f);   // Disk
                    });

                    table.Header(header =>
                    {
                        void HeaderCell(string text) => header.Cell().BorderBottom(1).Padding(5).PaddingTop(20).Text(text).Bold();
                        HeaderCell("Timestamp");
                        HeaderCell("Polling Status");
                        HeaderCell("Health Status");
                        HeaderCell("Health Reason");
                        HeaderCell("CPU");
                        HeaderCell("RAM");
                        HeaderCell("Disk");
                    });

                    foreach (var history in reportData.HistoryRecords)
                    {
                        void DataCell(string text) => table.Cell().BorderBottom(0.5f).BorderColor(Colors.Grey.Lighten2).Padding(5).Text(text);

                        DataCell(history.Timestamp.ToString("yyyy-MM-dd HH:mm:ss"));
                        DataCell(history.PollingStatus ?? "N/A");
                        DataCell(history.HealthStatus.ToString());
                        DataCell(history.HealthStatusReason ?? "N/A");
                        DataCell(history.CpuLoadPercentage.HasValue ? $"{history.CpuLoadPercentage:F2}%" : "N/A");
                        DataCell(FormatStorage(history.UsedRamKBytes, history.TotalRam, history.MemoryUsagePercentage));
                        DataCell(FormatStorage(history.UsedDiskKBytes, history.TotalDisk, history.DiskUsagePercentage));
                    }
                });

                page.Footer().AlignCenter().Text(x =>
                {
                    x.Span("Page ");
                    x.CurrentPageNumber();
                    x.Span(" of ");
                    x.TotalPages();
                });
            });
        }).GeneratePdf();
    }
}

